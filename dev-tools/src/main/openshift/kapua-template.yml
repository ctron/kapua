apiVersion: v1
id: kapua-broker
kind: Template
name: kapua-broker
metadata:
  name: kapua-broker
parameters:
- name:           IMAGE_VERSION 
  description:      The version of the image to use
  value:            latest
- name:           DOCKER_ACCOUNT
  description:      The docker hub account name to pull from
  value:            eclipse
- name:           JOLOKIA_PASSWORD
  description:      The password used for the Jolokia endpoint authentication
  generate:         expression
  from:             '[a-zA-Z0-9]{15}'
  required:         true
- name:           JOLOKIA_USER
  description:      The username used for the Jolokia endpoint authentication
  value:            jolokia

objects:

# Config Maps (Hawkular)

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: hawkular-openshift-agent-kapua
    labels:
      name: hawkular-openshift-agent-kapua
      hawkular-openshift-agent: jolokia-kapua
  data:
    hawkular-openshift-agent: |
      endpoints:
      - type: jolokia
        protocol: https
        port: 8778
        path: /jolokia/
        collection_interval: 15s
        credentials:
          username: ${JOLOKIA_USER}
          password: ${JOLOKIA_PASSWORD}
        tls:
          skip_certificate_validation: true
        metrics:
        - name: java.lang:type=Memory#HeapMemoryUsage#used
          id: java_memory_heap_used
          type: gauge
          description: Heap Memory Used
          units: B

# Deployment configs

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: sql
    name: sql
  spec:
    replicas: 1
    selector:
      app: sql
      deploymentconfig: sql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: sql
          deploymentconfig: sql
          hawkular-openshift-agent: jolokia-kapua
      spec:
        containers:
        - env:
          - name: H2_OPTS
            value: -javaagent:/jolokia-jvm-agent.jar=port=8778,protocol=https,caCert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,clientPrincipal=cn=system:master-proxy,useSslClientAuthentication=true,extraClientCheck=true,host=0.0.0.0,discoveryEnabled=false,user=${JOLOKIA_USER},password=${JOLOKIA_PASSWORD}
          image: ${DOCKER_ACCOUNT}/kapua-sql:${IMAGE_VERSION}
          imagePullPolicy: Always
          name: sql
          ports:
          - containerPort: 8778 
            name: jolokia
          - containerPort: 3306
          - containerPort: 8181
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /opt/h2-data
            name: sql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: sql-data
        - name: hawkular-openshift-agent
          configMap:
            name: hawkular-openshift-agent-kapua

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: kapua-broker
    name: kapua-broker
  spec:
    replicas: 1
    selector:
      app: kapua-broker
      deploymentconfig: kapua-broker
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/container.kapua-broker.image.entrypoint: '["/maven/bin/activemq","console"]'
        labels:
          app: kapua-broker
          deploymentconfig: kapua-broker
          hawkular-openshift-agent: jolokia-kapua
      spec:
        containers:
        - env:
          - name: ACTIVEMQ_OPTS
            value: -Dcommons.db.connection.host=$SQL_SERVICE_HOST -Dcommons.db.connection.port=$SQL_PORT_3306_TCP_PORT -javaagent:/jolokia-jvm-agent.jar=port=8778,protocol=https,caCert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,clientPrincipal=cn=system:master-proxy,useSslClientAuthentication=true,extraClientCheck=true,host=0.0.0.0,discoveryEnabled=false,user=${JOLOKIA_USER},password=${JOLOKIA_PASSWORD}
          image: ${DOCKER_ACCOUNT}/kapua-broker:${IMAGE_VERSION}
          imagePullPolicy: Always
          name: kapua-broker
          ports:
          - containerPort: 8778 
            name: jolokia
          - containerPort: 1883
          - containerPort: 61614
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 1883
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /maven/data
            name: kapua-broker-volume-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: kapua-broker-volume-1

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: kapua-console
    name: kapua-console
  spec:
    replicas: 1
    selector:
      app: kapua-console
      deploymentconfig: kapua-console
    template:
      metadata:
        labels:
          app: kapua-console
          deploymentconfig: kapua-console
          hawkular-openshift-agent: jolokia-kapua
      spec:
        containers:
        - env:
          - name: JAVA_OPTS
            value: -Dcommons.db.connection.host=$SQL_SERVICE_HOST -Dcommons.db.connection.port=$SQL_PORT_3306_TCP_PORT -Dbroker.host=$KAPUA_BROKER_SERVICE_HOST -javaagent:/jolokia-jvm-agent.jar=port=8778,protocol=https,caCert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,clientPrincipal=cn=system:master-proxy,useSslClientAuthentication=true,extraClientCheck=true,host=0.0.0.0,discoveryEnabled=false,user=${JOLOKIA_USER},password=${JOLOKIA_PASSWORD}
          image: ${DOCKER_ACCOUNT}/kapua-console-jetty:${IMAGE_VERSION}
          imagePullPolicy: Always
          name: kapua-console
          ports:
          - containerPort: 8778 
            name: jolokia
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: hawkular-openshift-agent
          configMap:
            name: hawkular-openshift-agent-kapua

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: kapua-api
      hawkular-openshift-agent: jolokia-kapua
    name: kapua-api
  spec:
    replicas: 1
    selector:
      app: kapua-api
      deploymentconfig: kapua-api
    template:
      metadata:
        labels:
          app: kapua-api
          deploymentconfig: kapua-api
          hawkular-openshift-agent: jolokia-kapua
      spec:
        containers:
        - env:
          - name: JAVA_OPTS
            value: -Dcommons.db.connection.host=$SQL_SERVICE_HOST -Dcommons.db.connection.port=$SQL_PORT_3306_TCP_PORT -Dbroker.host=$KAPUA_BROKER_SERVICE_HOST -javaagent:/jolokia-jvm-agent.jar=port=8778,protocol=https,caCert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,clientPrincipal=cn=system:master-proxy,useSslClientAuthentication=true,extraClientCheck=true,host=0.0.0.0,discoveryEnabled=false,user=${JOLOKIA_USER},password=${JOLOKIA_PASSWORD}
          image: ${DOCKER_ACCOUNT}/kapua-api-jetty:${IMAGE_VERSION}
          imagePullPolicy: Always
          name: kapua-console
          ports:
          - containerPort: 8778 
            name: jolokia
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: hawkular-openshift-agent
          configMap:
            name: hawkular-openshift-agent-kapua

# Services
        
- apiVersion: v1
  kind: Service
  metadata:
    name: sql
    labels:
      app: sql
  spec:
    ports:
    - name: h2-sql
      protocol: TCP
      port: 3306
      targetPort: 3306
    - name: h2-web
      protocol: TCP
      port: 8181
      targetPort: 8181
    selector:
      app: sql
      deploymentconfig: sql
- apiVersion: v1
  kind: Service
  metadata:
    name: kapua-broker
    labels:
      app: kapua-broker
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "sql", "kind": "Service"}]'
  spec:
    ports:
    - name: mqtt-tcp
      protocol: TCP
      port: 1883
      targetPort: 1883
    - name: mqtt-websocket-tcp
      protocol: TCP
      port: 61614
      targetPort: 61614
    selector:
      app: kapua-broker
      deploymentconfig: kapua-broker
- apiVersion: v1
  kind: Service
  metadata:
    name: kapua-console
    labels:
      app: kapua-console
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "sql", "kind": "Service"}]'
  spec:
    ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      app: kapua-console
      deploymentconfig: kapua-console
- apiVersion: v1
  kind: Service
  metadata:
    name: kapua-api
    labels:
      app: kapua-api
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "sql", "kind": "Service"}]'
  spec:
    ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      app: kapua-api
      deploymentconfig: kapua-api

# Routes

- apiVersion: v1
  kind: Route
  metadata:
    name: broker
    labels:
      app: kapua-broker
  spec:
    to:
      kind: Service
      name: kapua-broker
    port:
      targetPort: mqtt-websocket-tcp
- apiVersion: v1
  kind: Route
  metadata:
    name: console
    labels:
      app: kapua-console
  spec:
    to:
      kind: Service
      name: kapua-console
    port:
      targetPort: http
- apiVersion: v1
  kind: Route
  metadata:
    name: api
    labels:
      app: kapua-api
  spec:
    to:
      kind: Service
      name: kapua-api
    port:
      targetPort: http
